class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> mp;
        int sum = 0;
        mp[0] = -1; // To handle subarrays starting from index 0

        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            if (k != 0) {
                sum %= k;
            }

            // If this remainder has been seen before
            if (mp.find(sum) != mp.end()) {
                if (i - mp[sum] > 1) { // length >= 2
                    return true;
                }
            } else {
                mp[sum] = i; // store the first occurrence index
            }
        }

        return false;
    }
};
